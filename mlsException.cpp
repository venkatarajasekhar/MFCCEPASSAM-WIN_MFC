#include "stdafx.h"
#include "mlsException.h"

namespace mlsMFCDll
{
	const errCodeMap_t errCodeMap[]=
	{
		{ S_FALSE,"S_FAIL",},
		{ ERROR_INVALID_FUNCTION,"ERROR_INVALID_FUNCTION" ,},
		{ ERROR_FILE_NOT_FOUND,"ERROR_FILE_NOT_FOUND" ,},
		{ ERROR_PATH_NOT_FOUND,"ERROR_PATH_NOT_FOUND" ,},
		{ ERROR_TOO_MANY_OPEN_FILES,"ERROR_TOO_MANY_OPEN_FILES" ,},
		{ ERROR_ACCESS_DENIED,"ERROR_ACCESS_DENIED" ,},
		{ ERROR_INVALID_HANDLE,"ERROR_INVALID_HANDLE" ,},
		{ ERROR_ARENA_TRASHED,"ERROR_ARENA_TRASHED" ,},
		{ ERROR_NOT_ENOUGH_MEMORY,"ERROR_NOT_ENOUGH_MEMORY" ,},
		{ ERROR_INVALID_BLOCK,"ERROR_INVALID_BLOCK" ,},
		{ ERROR_BAD_ENVIRONMENT,"ERROR_BAD_ENVIRONMENT" ,},
		{ ERROR_BAD_FORMAT,"ERROR_BAD_FORMAT" ,},
		{ ERROR_INVALID_ACCESS,"ERROR_INVALID_ACCESS" ,},
		{ ERROR_INVALID_DATA,"ERROR_INVALID_DATA" ,},
		{ ERROR_OUTOFMEMORY,"ERROR_OUTOFMEMORY" ,},
		{ ERROR_INVALID_DRIVE,"ERROR_INVALID_DRIVE" ,},
		{ ERROR_CURRENT_DIRECTORY,"ERROR_CURRENT_DIRECTORY" ,},
		{ ERROR_NOT_SAME_DEVICE,"ERROR_NOT_SAME_DEVICE" ,},
		{ ERROR_NO_MORE_FILES,"ERROR_NO_MORE_FILES" ,},
		{ ERROR_WRITE_PROTECT,"ERROR_WRITE_PROTECT" ,},
		{ ERROR_BAD_UNIT,"ERROR_BAD_UNIT" ,},
		{ ERROR_NOT_READY,"ERROR_NOT_READY" ,},
		{ ERROR_BAD_COMMAND,"ERROR_BAD_COMMAND" ,},
		{ ERROR_CRC,"ERROR_CRC" ,},
		{ ERROR_BAD_LENGTH,"ERROR_BAD_LENGTH" ,},

		{ SCARD_E_CANCELLED, "SCARD_E_CANCELLED", },
		{ SCARD_E_CANT_DISPOSE, "SCARD_E_CANT_DISPOSE", },
		{ SCARD_E_INSUFFICIENT_BUFFER, "SCARD_E_INSUFFICIENT_BUFFER", },
		{ SCARD_E_INVALID_ATR, "SCARD_E_INVALID_ATR", },
		{ SCARD_E_INVALID_HANDLE, "SCARD_E_INVALID_HANDLE", },
		{ SCARD_E_INVALID_PARAMETER, "SCARD_E_INVALID_PARAMETER", },
		{ SCARD_E_INVALID_TARGET, "SCARD_E_INVALID_TARGET", },
		{ SCARD_E_INVALID_VALUE, "SCARD_E_INVALID_VALUE", },
		{ SCARD_E_NO_MEMORY, "SCARD_E_NO_MEMORY", },
		{ SCARD_F_COMM_ERROR, "SCARD_F_COMM_ERROR", },
		{ SCARD_F_INTERNAL_ERROR, "SCARD_F_INTERNAL_ERROR", },
		{ SCARD_F_UNKNOWN_ERROR, "SCARD_F_UNKNOWN_ERROR", },
		{ SCARD_F_WAITED_TOO_LONG, "SCARD_F_WAITED_TOO_LONG", },
		{ SCARD_E_UNKNOWN_READER, "SCARD_E_UNKNOWN_READER", },
		{ SCARD_E_TIMEOUT, "SCARD_E_TIMEOUT", },
		{ SCARD_E_SHARING_VIOLATION, "SCARD_E_SHARING_VIOLATION", },
		{ SCARD_E_NO_SMARTCARD, "SCARD_E_NO_SMARTCARD", },
		{ SCARD_E_UNKNOWN_CARD, "SCARD_E_UNKNOWN_CARD", },
		{ SCARD_E_PROTO_MISMATCH, "SCARD_E_PROTO_MISMATCH", },
		{ SCARD_E_NOT_READY, "SCARD_E_NOT_READY", },
		{ SCARD_E_SYSTEM_CANCELLED, "SCARD_E_SYSTEM_CANCELLED", },
		{ SCARD_E_NOT_TRANSACTED, "SCARD_E_NOT_TRANSACTED", },
		{ SCARD_E_READER_UNAVAILABLE, "SCARD_E_READER_UNAVAILABLE", },

		{ SCARD_W_UNSUPPORTED_CARD, "SCARD_W_UNSUPPORTED_CARD", },
		{ SCARD_W_UNRESPONSIVE_CARD, "SCARD_W_UNRESPONSIVE_CARD", },
		{ SCARD_W_UNPOWERED_CARD, "SCARD_W_UNPOWERED_CARD", },
		{ SCARD_W_RESET_CARD, "SCARD_W_RESET_CARD", },
		{ SCARD_W_REMOVED_CARD, "SCARD_W_REMOVED_CARD", },

		{ SCARD_E_PCI_TOO_SMALL, "SCARD_E_PCI_TOO_SMALL", },
		{ SCARD_E_READER_UNSUPPORTED, "SCARD_E_READER_UNSUPPORTED", },
		{ SCARD_E_DUPLICATE_READER, "SCARD_E_DUPLICATE_READER", },
		{ SCARD_E_CARD_UNSUPPORTED, "SCARD_E_CARD_UNSUPPORTED", },
		{ SCARD_E_NO_SERVICE, "SCARD_E_NO_SERVICE", },
		{ SCARD_E_SERVICE_STOPPED, "SCARD_E_SERVICE_STOPPED", },
	};
} //namespace mlsMFCDll

using namespace mlsMFCDll;

const char* mlsException::what() const throw()
{
	if (m_cause==0xFFFFFFFF) 
	{
		return m_msg;
	}

	INT32 iTableSize=sizeof(errCodeMap)/sizeof(errCodeMap[0]);

	for (INT32 idx = 0; 
		idx < iTableSize; 
		idx++ )
	{
		if (errCodeMap[idx].code == m_cause)
		{
			return errCodeMap[idx].msg;
		}		
	}

	return "Error!";
}

mlsException::mlsException(char* msg)
{
	try
	{
		m_cause = 0xFFFFFFFF;
		strcpy_s(m_msg,msg);
	}
	catch(...)
	{
		ASSERT(0);
	}
}